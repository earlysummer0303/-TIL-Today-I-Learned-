import UIKit

// 구구단
print("============================구구단==================================")
// -> 반복문을 이용해서 구구단 출력 (앨런이 요구한 형태로)

for i in 2...9{
    for j in 1...9{
        print("\(i) x \(j) = \(i*j)")
    }
}

//3의 배수의 발견
print("============================3의 배수의 발견==================================")
//1~100의 수 중 3의 배수가 발견되면 "3의 배수 발견 : n" 으로 표현

for i in 1...100 {
    if i%3 == 0 {
        print("3의 배수 발견 : \(i)")
    }
    else {continue}
}

// while 문으로 해보기
print("============================3의 배수의 발견 2==================================")

var num = 1

while num <= 100{
    if num%3 == 0{
        print("3배수 발견 : \(num)")
    }
    num+=1
}

// 가독성이 높아지는 구현

for i in 1...100{
    if i%3 != 0{
        continue
    }
    print("3의 배수 발견 : \(i)")
} // guard 문 처럼, 조건을 만족하지 않는 것을 필터링 하는 방식. good


// 스마일 계단 쌓기
print("============================스마일 계단 쌓기==================================")
//🤓
//🤓🤓
//🤓🤓🤓
//🤓🤓🤓🤓
//🤓🤓🤓🤓🤓

for i in 1...5{
    for _ in 1...i{
        print("🤓",terminator: "")
    }
    print() // 다른 터미네이터를 사용하다, 줄바꾸기를 사용하고 싶을때 print() 사용
}

// 스위머의 응용하기!
// 스마일 계단 역으로 쌓기
//____🤓
//___🤓🤓
//__🤓🤓🤓
//_🤓🤓🤓🤓
//🤓🤓🤓🤓🤓



// 5번 반복 ~
  // 1. _ 을 5-n 번 찍기 (terminator - "")
  // 2. 🤓을 n번 찍기 (terminator - "")
  // 3. 줄 바꾸기

for i in 1...5{
    // when let i == 5
    if i < 5 {
        for _ in 1...(5-i){
            //1...0
            print("_",terminator: "")
        }
    }
    for _ in 1...i{
        print("🤓",terminator: "")
    }
    print()
}

